//it is shortest path finding algo and edge cost is positive(nlogn+m)
//single source graph
#include<bits/stdc++.h>
using namespace std;
#define ll long long
#define inf 1000000000000000000
#define mx 200009
 
vector<pair<ll, ll>>g[mx];
bool vis[mx];
ll dis[mx];///distance
ll shortpath[mx];
void reset()
{
    for(ll i=0;i<mx;i++)
    {
        g[i].clear();
        vis[i]=0;
        dis[i]=inf;
    }
}
void digkstra(ll s,ll n)//s=source;
{
    for(ll i=0; i<n; i++)
    {
        dis[i]=inf;
    }
    dis[s]=0;
    priority_queue <pair<ll, ll>,vector<pair<ll,ll>>,greater<pair<ll,ll>> >q;
    q.push({0,s});//push cost,source node//first value cost second value node number
 
    while(!q.empty())
    {
        ll currnode=q.top().second;
        ll currdis=q.top().first;
        q.pop();
 
        if(dis[currnode]<currdis)continue;//importent
        ///cheake distance of all adjacent node of current node
        for(ll i=0; i<g[currnode].size(); i++)
        {
            ll nxtnode=g[currnode][i].first;
            ll nxtdis=g[currnode][i].second;
 
            if(currdis+nxtdis < dis[nxtnode])  ///if current distance is less previous distance(dis[nxtnode])
            {
                shortpath[nxtnode]=currnode;
                dis[nxtnode]=currdis+nxtdis;
                q.push({dis[nxtnode],nxtnode});
            }
 
        }
 
    }
 
}
int main()
{
    //freopen("textnew.txt","r",stdin);
    // reset();
 
    ll node,edge,n,m,i,j,source;
    cin>>node>>edge;
    for(i=1; i<=edge; i++)
    {
        ll u,v,cost;
        cin>>u>>v;
        g[u].push_back({v,1});
        g[v].push_back({u,1});
    }
    //cout<<node<<endl;
    digkstra(1,node+1);
 
    if(dis[node]==inf)
    {
        cout<<"IMPOSSIBLE"<<endl;
    }
    else
    {
        /*for(i=2;i<=node;i++)
        {
            cout<<shortpath[i]<<" ";
        }
        cout<<endl;*/
        ll x=node;
        vector<ll>v;
        v.push_back(x);
        while(1)
        {
            x =shortpath[x];
            v.push_back(x);
            if(x==1)break;
        }
        cout<<v.size()<<endl;
        for(i=v.size()-1; i>=0; i--)
        {
            cout<<v[i]<<" ";
        }
        cout<<endl;
    }
}
